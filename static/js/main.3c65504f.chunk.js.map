{"version":3,"sources":["fontawesome/svgs/brands/linkedin.svg","fontawesome/svgs/brands/npm.svg","fontawesome/svgs/brands/github.svg","fontawesome/svgs/brands/twitter.svg","fontawesome/svgs/brands/medium.svg","fontawesome/svgs/brands/instagram.svg","fontawesome/svgs/brands/facebook.svg","components/note/Note.js","components/card/Card.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","href","link","target","rel","className","src","icon","alt","title","React","Component","avatar","skills","require","map","skill","i","Note_default","key","App","card_Card_default","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gMCKtC,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHIP,wEAOjB,OACEQ,EAAAC,EAAAC,cAAA,KAAGC,KAAMR,KAAKJ,MAAMa,KAAMC,OAAO,SAASC,IAAI,uBAC5CN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAOC,IAAKb,KAAKJ,MAAMkB,KAAMC,IAAKf,KAAKJ,MAAMoB,gBAXvCC,IAAMC,iCCGjC,SAAAvB,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXe,OAAQ,6DACRC,OAAQ,CAAC,CACPN,KAAMO,EAAQ,IACdZ,KAAM,sEACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,sCACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,oCACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,mCACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,mCACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,yCACL,CACDK,KAAMO,EAAQ,IACdZ,KAAM,0CAzBOZ,wEA+BjB,OACEQ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKM,IAAKb,KAAKI,MAAMe,OAAQJ,IAAI,WAEjCV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eACbP,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,KAAGK,UAAU,OAAb,sFAINP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cAEXZ,KAAKI,MAAMgB,OAAOE,IAAI,SAACC,EAAOC,GAC5B,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMC,IAAKF,EAAGV,KAAMS,EAAMT,KAAME,MAAOO,EAAMP,MAAOP,KAAMc,EAAMd,kBAjDxDQ,IAAMC,kBCQpBS,MARf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACqB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c65504f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.48a2133d.svg\";","module.exports = __webpack_public_path__ + \"static/media/npm.07b3134c.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.f5a069d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.0729c42a.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.f1c256ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.6f7f616f.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.8c856a6a.svg\";","import React from 'react';\r\nimport \"./Nota.scss\";\r\n\r\nexport default class extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <img className=\"icon\" src={this.props.icon} alt={this.props.title} />\r\n      </a>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport Note from '../note/Note'\nimport \"./Card.scss\";\n\nexport default class extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      avatar: \"https://avatars0.githubusercontent.com/u/4544102?v=3&s=460\",\n      skills: [{\n        icon: require(\"../../fontawesome/svgs/brands/linkedin.svg\"),\n        link: 'https://www.linkedin.com/in/juli%C3%A1n-david-mora-ramos-21514b93/'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/npm.svg\"),\n        link: 'https://www.npmjs.com/~anlijudavid'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/github.svg\"),\n        link: 'https://github.com/juliandavidmr'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/twitter.svg\"),\n        link: 'https://twitter.com/anlijudavid'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/medium.svg\"),\n        link: 'https://medium.com/@anlijudavid'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/instagram.svg\"),\n        link: 'https://www.instagram.com/iamjuliand/'\n      }, {\n        icon: require(\"../../fontawesome/svgs/brands/facebook.svg\"),\n        link: 'https://www.facebook.com/7u1iAn94Vi9'\n      }]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"content tooltip\">\n        <div className=\"card\">\n          <div className=\"firstinfo\">\n            <img src={this.state.avatar} alt=\"avatar\" />\n\n            <div className=\"profileinfo\">\n              <h1>Julian David</h1>\n              <h3>Javascript Ninja</h3>\n              <p className=\"bio\">Lived all my life on the top of mount Fuji, learning the way to be a Ninja Dev.</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"badgescard\">\n          {\n            this.state.skills.map((skill, i) => {\n              return <Note key={i} icon={skill.icon} title={skill.title} link={skill.link} />;\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Card from \"../card/Card\";\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}